#pragma once

#include <iostream>

/*
 * Некоторые случаи использования ключевого слова constinit в C++, появившегося в стандарте C++20:
 * - Инициализация переменных со статическим сроком хранения. С помощью constinit можно гарантировать, что переменная будет
 * инициализирована во время компиляции, а не при первом прохождении через её объявление. Это помогает избежать ошибок, связанных
 * с глобальными объектами.
 * - Инициализация локальных переменных потока. constinit позволяет сообщить компилятору, что переменная уже инициализирована,
 * и тем самым сократить затраты, которые в противном случае возникали бы из-за скрытой защитной переменной.
 * - Решение проблемы порядка статической инициализации. С помощью constinit компилятор гарантирует, что переменная будет инициализирована
 * до того, как будут созданы любые другие статические переменные во время выполнения программы.
 *
 * Важно учитывать, что constinit может применяться только к переменным со статическим сроком хранения.
 */

namespace Example3 {

constinit int globalVar = 100; // Инициализация на этапе компиляции

constexpr int getValue() {
    return 100; // Функция возвращает константное значение
}

constinit int myValue = getValue(); // Инициализация на этапе компиляции

void test1()
{
    std::cout << "\ntest1()\n\n";

    std::cout << "globalVar = " << globalVar << std::endl;
}

void test2()
{
    std::cout << "\ntest2()\n\n";

    std::cout << "myValue = " << myValue << std::endl;
}

} // namespace Example3
