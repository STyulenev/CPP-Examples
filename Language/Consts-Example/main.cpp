#include "Example1.h"
#include "Example2.h"
#include "Example3.h"
#include "Example4.h"

/*
 * Разница между const, constexpr, consteval и constinit в C++ заключается в их назначении и особенностях использования:
 * - const. Объявляет объект как константу времени выполнения, после инициализации значение не меняется. Объект const доступен только для
 * чтения, но это не означает, что он неизменяем. Значение объекта const можно изменить с помощью ключевого слова mutable и const_cast.
 * - constexpr. Используется для перемещения вычислений из времени выполнения в время компиляции. Может применяться к переменным и функциям.
 * Функции constexpr могут выполняться как во время компиляции, так и во время выполнения.
 * - consteval. Применяется только к функциям. Подобен constexpr, но функцию нельзя вызывать в контексте, не являющемся постоянным выражением.
 * Цель использования — заставить функцию вызываться только во время компиляции.
 * - constinit. Утверждает, что переменная имеет статическую инициализацию. Если для инициализации используется функция, она должна быть
 * constexpr или consteval. Не подразумевает const.
 *
 * Некоторые другие различия:
 * - Время инициализации: const инициализируется во время выполнения, constexpr и constinit — во время компиляции.
 * - Область применения: constexpr можно применять к локальным автоматическим переменным, constinit — только к статическим или локальным
 * по потоку объектам.
 * - Использование в постоянных выражениях: constexpr переменные можно использовать в постоянных выражениях, а переменные constinit — нет.
 * - Совместимость: constinit нельзя использовать вместе с constexpr или consteval, так как constinit предназначен для статической
 * инициализации переменных, а constexpr и consteval — для оценки выражений во время компиляции.
 *
 */
int main()
{
    /*{
        Example1::test1();
        Example1::test2();
    }*/

    {
        Example2::test1();
        Example2::test2();
        Example2::test3();
        Example2::test4();
        Example2::test5();
        Example2::test6();
        Example2::test7();
        Example2::test8();
        Example2::test9();
        Example2::test10();
    }

    /*{
        Example3::test1();
        Example3::test2();
    }*/

    /*{
        Example4::test1();
        Example4::test2();
    }*/

    return 0;
}
