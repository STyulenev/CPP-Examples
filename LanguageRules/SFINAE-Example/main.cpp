#include "Logic.h"

/*
 * SFINAE (англ. substitution failure is not an error, «неудавшаяся подстановка — не ошибка») — правило языка C++, связанное с шаблонами и перегрузкой функций.
 * Широко применяется «не по назначению» — для рефлексии при компиляции: в зависимости от свойств типа компиляция идёт по тому или другому пути.
 *
 * Правило SFINAE гласит: Если не получается рассчитать окончательные типы/значения шаблонных параметров функции, компилятор не выбрасывает ошибку,
 * а ищет другую подходящую перегрузку. Ошибка будет в трёх случаях:
 * - Не нашлось ни одной подходящей перегрузки.
 * - Нашлось несколько таких перегрузок, и компилятор не может решить, какую взять.
 * - Перегрузка нашлась, она оказалась шаблонной, и при инстанцировании шаблона случилась ошибка.
 */
int main()
{
    /*
     * Не было ошибки подстановки, использовалась шаблонная фунция void templatePrint(const T& value)
     */
    {
        SomeClass someClass;
        templatePrint(someClass);
    }

    /*
     * Не было ошибки подстановки, использовалась фунция void templatePrint(const SomeClass2& value)
     */
    {
        SomeClass2 someClass;
        templatePrint(someClass);
    }

    /*
     * Ошибка, нет подходящих функций т.к. нет перегрузок templatePrint для класса SomeClass3. Шаблон пропустит только классы,
     * с методом print().
     */
    {
        SomeClass3 someClass;
        //templatePrint(someClass); // ошибка: no matching function for call to 'templatePrint'
        someClass.print2();
    }

    return 0;
}
