#include "Servant.h"
#include "Services.h"

/*
 * Паттерна Servant (секретарь, слуга) используется для предоставления некоторого поведения группе классов. Вместо определения этого поведения в
 * каждом классе — или когда мы не можем вынести это поведение за скобки в общем родительском классе — оно определяется один раз в Servant.
 *
 * Существует два способа реализации этого шаблона проектирования:
 * 1. Пользователь знает сервант (в этом случае необходимо знать обслуживаемые классы) и отправляет сообщения с запросами экземплярам серванта,
 * передавая обслуживаемые объекты в качестве параметров. Обслуживаемые классы (сервисы) не знают о серванте, но они реализуют интерфейс «IService».
 * Класс пользователя просто вызывает метод серванта и передает обслуживаемые объекты в качестве параметров.
 * 2. Обслуживаемые экземпляры знают серванта, и пользователь отправляет им сообщения с запросами (в этом случае знать серванта не обязательно).
 * Затем обслуживаемые экземпляры отправляют сообщения экземплярам серванта, запрашивая обслуживание. Затем обслуживаемые классы сами просят сервант
 * достичь желаемой функциональности.
 *
 */

Servant* getServant()
{
    IService* myService = new ConcreteService();
    return new Servant(myService);
}

int main()
{
    Servant* servant = getServant();

    servant->doMethod();
    // ...

    delete servant;

    return 0;
}
